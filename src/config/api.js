// API Configuration
const API_CONFIG = {
  // –õ–æ–∫–∞–ª—å–Ω—ã–π development —Å–µ—Ä–≤–µ—Ä
  development: {
    baseURL: 'http://localhost:5000/api',
    enabled: true // –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  },
  // Production Railway API
  production: {
    baseURL: 'https://habit-tracker-backend-production-d3e2.up.railway.app/api',
    enabled: true
  }
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ä–µ–¥—É
const getCurrentEnvironment = () => {
  // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ GitHub Pages
  if (window.location.hostname === 'dimkandin.github.io') {
    return 'production';
  }
  // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    return 'development';
  }
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é production
  return 'production';
};

const currentEnv = getCurrentEnvironment();
const config = API_CONFIG[currentEnv];

console.log(`üîó API Config: ${currentEnv}`, config);

// API —Ñ—É–Ω–∫—Ü–∏–∏
export const api = {
  baseURL: config.baseURL,
  enabled: config.enabled,
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  async health() {
    if (!this.enabled) return { status: 'disabled' };
    try {
      const response = await fetch(`${this.baseURL}/health`);
      return await response.json();
    } catch (error) {
      console.error('API health check failed:', error);
      return { status: 'error', error: error.message };
    }
  },

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  async register(email, password, name) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    try {
      const response = await fetch(`${this.baseURL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password, name })
      });
      
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
      
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      
      return data;
    } catch (error) {
      if (error.name === 'TypeError' || error.message.includes('Failed to fetch')) {
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }
      throw error;
    }
  },

  async login(email, password) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    try {
      const response = await fetch(`${this.baseURL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
      
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      }
      
      return data;
    } catch (error) {
      if (error.name === 'TypeError' || error.message.includes('Failed to fetch')) {
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }
      throw error;
    }
  },

  // –ü—Ä–∏–≤—ã—á–∫–∏
  async getHabits(token) {
    if (!this.enabled) return [];
    const response = await fetch(`${this.baseURL}/habits`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫');
    return await response.json();
  },

  async createHabit(habit, token) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    const response = await fetch(`${this.baseURL}/habits`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(habit)
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏');
    return await response.json();
  },

  async updateHabit(id, habit, token) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    const response = await fetch(`${this.baseURL}/habits/${id}`, {
      method: 'PUT',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(habit)
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏');
    return await response.json();
  },

  async deleteHabit(id, token) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    const response = await fetch(`${this.baseURL}/habits/${id}`, {
      method: 'DELETE',
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏');
    return await response.json();
  },

  // –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–∏–≤—ã—á–µ–∫
  async toggleCompletion(habitId, date, completed, token) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    const response = await fetch(`${this.baseURL}/habits/${habitId}/completion`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ date, completed })
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    return await response.json();
  },

  async setValue(habitId, date, value, token) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    const response = await fetch(`${this.baseURL}/habits/${habitId}/value`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ date, value })
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è');
    return await response.json();
  },

  async setMood(habitId, date, moodValue, token) {
    if (!this.enabled) throw new Error('API –æ—Ç–∫–ª—é—á–µ–Ω');
    const response = await fetch(`${this.baseURL}/habits/${habitId}/mood`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ date, mood_value: moodValue })
    });
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è');
    return await response.json();
  }
};

export default api;